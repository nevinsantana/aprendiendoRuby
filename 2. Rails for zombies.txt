Realizar la base de datos de twitter

	tweets
		4 Filas
		3Columnas

	Columna
	1 id
	2 status
	3 zombie

Hash
	Multiples llaves y valores encerrados entre corchetes llaves { }
	Keys sería el nombre que contendrá el valor, las cuales tambien se pueden llamar simbols

Para leer el valor de un simbol:
	b[:ejemplo]

	b[:status]

Leer y juntar dos simbolos como si fuera un string
	b[:zombie] + " dijo " + b:[:status]

	"Jin (es decir b[:zombie]) dijo acabo de 
	comer algunos deliciosos cerebros (es decir b[:status])"

t = Tweet.find(3)
t es la variable en la que se va a almacenar el tweet No 3
Tweet     Nombre de la bd

tambien se podría poner puts t[:id]

ó

puts t.id

Arroja el mismo resultado


Leer


Tweet.find(3)
.find sirve para leer un unico "tweet" o elemento dentro de la tabla

Para leer varios elementos

Tweet.find(3, 4, 5)

Tweet.first   Regresa el primer Tweet

Tweet.last Regresa el último Tweet

Tweet.all  Regresa todos los elementos tweet

Tweet.count  Regresa el número total de tweets

Tweet.order(:zombie)  Regresa todos los tweets ordenados por :zombie

Tweet.limit(10)   Regresa los primeros 10 tweets

Tweet.where(zombie: "ash")  Regresa todos los tweets de zombie llamados ash


Combinando métodos ejemplos:


Tweet.where(zombie: "ash").order(:status).limit(10)

Regresara sólo los tweets que sean de "ash", ordenados por :status, mostrandos solo los primeros 10

Tweet.where(zombie: "ash").first

Regresa el primer tweet de "ash"




Para crear un nuevo elemento

t = Tweet.new
t.status = "I <3 brains."
t.save

ó

t = Tweet.new(
	status: "i <3 brains",
	zombie: "Jim")
t.save

ó

Tweet.create(status: "I <3 brains", zombie: "Jim")

Al crear un nuevo elemento, el id se crea automaticamente
	
	Crear nuevas tabla
	t = NombreTabla.new
	t.key = value
	t.save
	
	ó

	t = TableName.new(hash)
	t.save

	ó

	TableName.create(hash)




Actualizar valor

t = Tweet.find(3)
t.zombie = "EyeballChomper"
t.save

Actualizar multiples valores

t = Tweet.find(2)
t.attributes = {
	status: "Can I munch your eyeballs?",
	zombie: "EyeballCHomber" }
t.save


t = Tweet.find(2)
t.update(
	status: "Can I munch your eyeballs?",
	zombie: "EyeballChomper" )


Para tablas

t = TableName.find(id)
t.key = value
t.save


t = TableName.find(id)
t.attributes = hash
t.save


t = Tweet.find(2)
t = TableName.update(hash)



Borrar

t = Tweet.find(3)
t.destroy

Tweet.find(2).destroy

Tweet.destroy_all



Para tablas

t = Table.find(id)
t.destroy

TableName.find(id).destroy

TableName.destroy_all



Modelos


clases

	class Tweet < ActiveRecord::Base
		validates_presence_of :status
	end

	Esto es para validar que no se tengan valores vacíos

Para generar un mensaje de error
t = Tweet.new

t.errors.messages
{ status:["can't be blank"] }

t.errors[:status][0]
Regresara "can't be blank"

Existen varios tipos de validaciones, así como la ya explicada

validate_precence_of :status	Verifica que contenga string
validates_numericality_of _fingers Verifica que contenga números
validates_uniqueness_of :toothmarks verificar que es un valor único
validates_confirmation_of :password verifica que dos campos sean iguales
validates_acceptance_of :zombification Verifica que se haya confirmado alguna petición, como un checkbox
validates_length_of :password, minimum: 3 Verifica que la longitud del array sea de la señalada
validates_format_of :email, with: /regex/i  Formato del texto introducido
validates_inclusion_of :age, in: 21..99  Valida si el valor introducido esta entre el rango establecido
validates_exclusion_of :Age, in: 0...21, message: "Sorry you must be over 21"  Verifica que el valor introducido no estre en el rango establecido


Otras formas de introducir los validates:

validates : status, presence: true
validates :status, length: { minimum: 3 }

ó (mejor)

validates :status, presence: true, length: { minimum: 3 }

otras opciones dentro de un validate:

presence: true
uniqueness: true
numericality: true
length: { minimum: 0, maximum: 2000 }
format: {  with: /.*/ }
acceptance: true
confirmation: true

Relaciones entre diferentes tablas

crear relaciones entre tablas

class Zombie < ActiveRecord::Base
	has_many :tweets(plural)
end				(Un zombie tiene varios "tweets")

class Tweet < ActiveRecord::Base
	belongs_to :zombie(singular)
end				(Cada twet pertenece un zombie)



ash = Zombie.find(1)

t = Tweet.create(status: "Your eyelids taste like bacon.", zombie: ash)

ash.tweets.count

ash.tweets


Como el usuario ve las aplicaciones

Se puede introducir código ruby en archivos html

se introduce entre <%   %>
por ejemplo
<% tweet = Tweet.find(1) %>
<h1><%=  tweet.status  %></h1>
<p>Posted by <%= tweet.zombie.name %></p>

<% yield %>
	Es para referirse a otro código ruby

para crear un link en ruby:
	<%= link_to tweet.zombie.name, zombie_path(tweet.zombie) %>

sintáxis alternativa
	<%= link_to tweet.zombie.name, tweet.zombie %>

Link Recipe
	<%= link_to text_to_show, model_instance %>

<%= significa imprimir resultado de Ruby en html
